{"version":3,"sources":["webpack:///./node_modules/react-bootstrap/esm/Image.js","webpack:///./src/pages/about.js","webpack:///./src/utils/helpers.js"],"names":["Image","string","bool","forwardRef","_ref","ref","bsPrefix","className","fluid","rounded","roundedCircle","thumbnail","props","classes","createElement","displayName","defaultProps","data","author","site","siteMetadata","html","allMarkdownRemark","edges","node","title","width","height","src","alt","query","getImageMap","images","regex","hasMultipleImages","limit","reduce","map","image","slug","relativePath","match","hasOwnProperty","length","push","childImageSharp","arr"],"mappings":"6FAAA,uGAsCIA,GA5BQ,IAAUC,OAKb,IAAUC,KAKR,IAAUA,KAKJ,IAAUA,KAKd,IAAUA,KAQX,IAAMC,YAAW,SAAUC,EAAMC,GAC3C,IAAIC,EAAWF,EAAKE,SAChBC,EAAYH,EAAKG,UACjBC,EAAQJ,EAAKI,MACbC,EAAUL,EAAKK,QACfC,EAAgBN,EAAKM,cACrBC,EAAYP,EAAKO,UACjBC,EAAQ,YAA8BR,EAAM,CAAC,WAAY,YAAa,QAAS,UAAW,gBAAiB,cAE/GE,EAAW,YAAmBA,EAAU,OACxC,IAAIO,EAAU,IAAWL,GAASF,EAAW,SAAUG,GAAW,UAAWC,GAAiB,iBAAkBC,GAAaL,EAAW,cACxI,OAAoB,IAAMQ,cAAc,MAAO,YAAS,CAEtDT,IAAKA,GACJO,EAAO,CACRL,UAAW,IAAWA,EAAWM,UAGrCb,EAAMe,YAAc,QACpBf,EAAMgB,aAzBa,CACjBR,OAAO,EACPC,SAAS,EACTC,eAAe,EACfC,WAAW,GAsBE,O,oCC1Df,sHAMe,sBAAe,IAAZM,EAAW,EAAXA,KACRC,EAAWD,EAAKE,KAAKC,aAArBF,OAEFG,EAAOJ,EAAKK,kBAAkBC,MAAM,GAAGC,KAAKH,KAClD,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKI,MAAM,aACX,kBAAC,IAAD,CAAWA,MAAM,aACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEhB,SAAO,EACPiB,MAAM,MACNC,OAAO,MACPC,IAAG,wBACHC,IAAKX,IAEP,6BAASX,UAAU,iCACjB,kBAAC,IAAD,CAAOc,KAAMA,QAOhB,IAAMS,EAAK,c,0HC9BH,G,UAAA,CACbC,YAAa,SAACC,EAAQC,EAAOC,EAA2BC,GACtD,YADoE,IAAzCD,OAAoB,QAAqB,IAAdC,MAAQ,GACvDH,EAAOI,QAAO,SAACC,EAAKC,GACzB,IAAMC,EAAOD,EAAMd,KAAKgB,aAAaC,MAAMR,GAAO,GAClD,GAAIC,EACF,GAAIG,EAAIK,eAAeH,GACjBF,EAAIE,GAAMI,QAAUR,GACtBE,EAAIE,GAAMK,KAAKN,EAAMd,KAAKqB,gBAAgBrC,WACvC,CACL,IAAMsC,EAAM,GACZA,EAAIF,KAAKN,EAAMd,KAAKqB,gBAAgBrC,OACpC6B,EAAIE,GAAQO,OAGdT,EAAIE,GAAQD,EAAMd,KAAKqB,gBAAgBrC,MAEzC,OAAO6B,IACN","file":"component---src-pages-about-js-0b0ee45f7397c4ecdfdb.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useBootstrapPrefix } from './ThemeProvider';\nexport var propTypes = {\n  /**\n   * @default 'img'\n   */\n  bsPrefix: PropTypes.string,\n\n  /**\n   * Sets image as fluid image.\n   */\n  fluid: PropTypes.bool,\n\n  /**\n   * Sets image shape as rounded.\n   */\n  rounded: PropTypes.bool,\n\n  /**\n   * Sets image shape as circle.\n   */\n  roundedCircle: PropTypes.bool,\n\n  /**\n   * Sets image shape as thumbnail.\n   */\n  thumbnail: PropTypes.bool\n};\nvar defaultProps = {\n  fluid: false,\n  rounded: false,\n  roundedCircle: false,\n  thumbnail: false\n};\nvar Image = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      fluid = _ref.fluid,\n      rounded = _ref.rounded,\n      roundedCircle = _ref.roundedCircle,\n      thumbnail = _ref.thumbnail,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"className\", \"fluid\", \"rounded\", \"roundedCircle\", \"thumbnail\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'img');\n  var classes = classNames(fluid && bsPrefix + \"-fluid\", rounded && \"rounded\", roundedCircle && \"rounded-circle\", thumbnail && bsPrefix + \"-thumbnail\");\n  return /*#__PURE__*/React.createElement(\"img\", _extends({\n    // eslint-disable-line jsx-a11y/alt-text\n    ref: ref\n  }, props, {\n    className: classNames(className, classes)\n  }));\n});\nImage.displayName = 'Image';\nImage.defaultProps = defaultProps;\nexport default Image;","import React from \"react\"\nimport { PageLayout, PageTitle, About } from \"../components\"\nimport { Container, Image } from \"react-bootstrap\"\nimport { graphql } from \"gatsby\"\nimport { SEO } from \"../utils\"\n\nexport default ({ data }) => {\n  const { author } = data.site.siteMetadata\n\n  const html = data.allMarkdownRemark.edges[0].node.html\n  return (\n    <PageLayout>\n      <SEO title=\"About Me\" />\n      <PageTitle title=\"About Me\" />\n      <Container>\n        <Image\n          rounded\n          width=\"140\"\n          height=\"140\"\n          src={`../../icons/Image.png`}\n          alt={author}\n        />\n        <article className=\"w-75 m-auto pt-2 text-justify\">\n          <About html={html} />\n        </article>\n      </Container>\n    </PageLayout>\n  )\n}\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        unemployed\n        occupation\n        author\n      }\n    }\n    allMarkdownRemark(filter: { fileAbsolutePath: { regex: \"/about/\" } }) {\n      edges {\n        node {\n          id\n          html\n        }\n      }\n    }\n  }\n`\n","export default {\n  getImageMap: (images, regex, hasMultipleImages = false, limit = 3) => {\n    return images.reduce((map, image) => {\n      const slug = image.node.relativePath.match(regex)[0]\n      if (hasMultipleImages) {\n        if (map.hasOwnProperty(slug)) {\n          if (map[slug].length <= limit)\n            map[slug].push(image.node.childImageSharp.fluid)\n        } else {\n          const arr = []\n          arr.push(image.node.childImageSharp.fluid)\n          map[slug] = arr\n        }\n      } else {\n        map[slug] = image.node.childImageSharp.fluid\n      }\n      return map\n    }, {})\n  },\n}\n"],"sourceRoot":""}