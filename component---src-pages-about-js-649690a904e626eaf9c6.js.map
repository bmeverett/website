{"version":3,"sources":["webpack:///./node_modules/react-bootstrap/esm/Image.js","webpack:///./src/pages/about.js","webpack:///./src/utils/helpers.js"],"names":["Image","string","bool","forwardRef","_ref","ref","bsPrefix","className","fluid","rounded","roundedCircle","thumbnail","props","classes","createElement","displayName","defaultProps","data","author","site","siteMetadata","html","allMarkdownRemark","edges","node","title","width","height","src","alt","query","getImageMap","images","regex","hasMultipleImages","limit","reduce","map","image","slug","relativePath","match","hasOwnProperty","length","push","childImageSharp","arr"],"mappings":"6FAAA,uGAsCIA,GA5BQ,IAAUC,OAKb,IAAUC,KAKR,IAAUA,KAKJ,IAAUA,KAKd,IAAUA,KAQX,IAAMC,YAAW,SAAUC,EAAMC,GAC3C,IAAIC,EAAWF,EAAKE,SAChBC,EAAYH,EAAKG,UACjBC,EAAQJ,EAAKI,MACbC,EAAUL,EAAKK,QACfC,EAAgBN,EAAKM,cACrBC,EAAYP,EAAKO,UACjBC,EAAQ,YAA8BR,EAAM,CAAC,WAAY,YAAa,QAAS,UAAW,gBAAiB,cAE/GE,EAAW,YAAmBA,EAAU,OACxC,IAAIO,EAAU,IAAWL,GAASF,EAAW,SAAUG,GAAW,UAAWC,GAAiB,iBAAkBC,GAAaL,EAAW,cACxI,OAAoB,IAAMQ,cAAc,MAAO,YAAS,CAEtDT,IAAKA,GACJO,EAAO,CACRL,UAAW,IAAWA,EAAWM,UAGrCb,EAAMe,YAAc,QACpBf,EAAMgB,aAzBa,CACjBR,OAAO,EACPC,SAAS,EACTC,eAAe,EACfC,WAAW,GAsBE,O,oCC1Df,sHAMe,sBAAe,IAAZM,EAAW,EAAXA,KACRC,EAAWD,EAAKE,KAAKC,aAArBF,OAEFG,EAAOJ,EAAKK,kBAAkBC,MAAM,GAAGC,KAAKH,KAClD,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKI,MAAM,aACX,kBAAC,IAAD,CAAWA,MAAM,aACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEhB,SAAO,EACPiB,MAAM,MACNC,OAAO,MACPC,IAAG,wBACHC,IAAKX,IAEP,6BAASX,UAAU,iCACjB,kBAAC,IAAD,CAAOc,KAAMA,QAOhB,IAAMS,EAAK,c,0HC9BH,G,UAAA,CACbC,YAAa,SAACC,EAAQC,EAAOC,EAA2BC,GACtD,YADoE,IAAzCD,OAAoB,QAAqB,IAAdC,MAAQ,GACvDH,EAAOI,QAAO,SAACC,EAAKC,GACzB,IAAMC,EAAOD,EAAMd,KAAKgB,aAAaC,MAAMR,GAAO,GAClD,GAAIC,EACF,GAAIG,EAAIK,eAAeH,GACjBF,EAAIE,GAAMI,QAAUR,GACtBE,EAAIE,GAAMK,KAAKN,EAAMd,KAAKqB,gBAAgBrC,WACvC,CACL,IAAMsC,EAAM,GACZA,EAAIF,KAAKN,EAAMd,KAAKqB,gBAAgBrC,OACpC6B,EAAIE,GAAQO,OAGdT,EAAIE,GAAQD,EAAMd,KAAKqB,gBAAgBrC,MAEzC,OAAO6B,IACN","file":"component---src-pages-about-js-649690a904e626eaf9c6.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useBootstrapPrefix } from './ThemeProvider';\nexport var propTypes = {\n  /**\n   * @default 'img'\n   */\n  bsPrefix: PropTypes.string,\n\n  /**\n   * Sets image as fluid image.\n   */\n  fluid: PropTypes.bool,\n\n  /**\n   * Sets image shape as rounded.\n   */\n  rounded: PropTypes.bool,\n\n  /**\n   * Sets image shape as circle.\n   */\n  roundedCircle: PropTypes.bool,\n\n  /**\n   * Sets image shape as thumbnail.\n   */\n  thumbnail: PropTypes.bool\n};\nvar defaultProps = {\n  fluid: false,\n  rounded: false,\n  roundedCircle: false,\n  thumbnail: false\n};\nvar Image = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      fluid = _ref.fluid,\n      rounded = _ref.rounded,\n      roundedCircle = _ref.roundedCircle,\n      thumbnail = _ref.thumbnail,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"className\", \"fluid\", \"rounded\", \"roundedCircle\", \"thumbnail\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'img');\n  var classes = classNames(fluid && bsPrefix + \"-fluid\", rounded && \"rounded\", roundedCircle && \"rounded-circle\", thumbnail && bsPrefix + \"-thumbnail\");\n  return /*#__PURE__*/React.createElement(\"img\", _extends({\n    // eslint-disable-line jsx-a11y/alt-text\n    ref: ref\n  }, props, {\n    className: classNames(className, classes)\n  }));\n});\nImage.displayName = 'Image';\nImage.defaultProps = defaultProps;\nexport default Image;","import React from \"react\"\r\nimport { PageLayout, PageTitle, About } from \"../components\"\r\nimport { Container, Image } from \"react-bootstrap\"\r\nimport { graphql } from \"gatsby\"\r\nimport { SEO } from \"../utils\"\r\n\r\nexport default ({ data }) => {\r\n  const { author } = data.site.siteMetadata\r\n\r\n  const html = data.allMarkdownRemark.edges[0].node.html\r\n  return (\r\n    <PageLayout>\r\n      <SEO title=\"About Me\" />\r\n      <PageTitle title=\"About Me\" />\r\n      <Container>\r\n        <Image\r\n          rounded\r\n          width=\"140\"\r\n          height=\"140\"\r\n          src={`../../icons/Image.png`}\r\n          alt={author}\r\n        />\r\n        <article className=\"w-75 m-auto pt-2 text-justify\">\r\n          <About html={html} />\r\n        </article>\r\n      </Container>\r\n    </PageLayout>\r\n  )\r\n}\r\n\r\nexport const query = graphql`\r\n  query {\r\n    site {\r\n      siteMetadata {\r\n        unemployed\r\n        occupation\r\n        author\r\n      }\r\n    }\r\n    allMarkdownRemark(filter: { fileAbsolutePath: { regex: \"/about/\" } }) {\r\n      edges {\r\n        node {\r\n          id\r\n          html\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n","export default {\r\n  getImageMap: (images, regex, hasMultipleImages = false, limit = 3) => {\r\n    return images.reduce((map, image) => {\r\n      const slug = image.node.relativePath.match(regex)[0]\r\n      if (hasMultipleImages) {\r\n        if (map.hasOwnProperty(slug)) {\r\n          if (map[slug].length <= limit)\r\n            map[slug].push(image.node.childImageSharp.fluid)\r\n        } else {\r\n          const arr = []\r\n          arr.push(image.node.childImageSharp.fluid)\r\n          map[slug] = arr\r\n        }\r\n      } else {\r\n        map[slug] = image.node.childImageSharp.fluid\r\n      }\r\n      return map\r\n    }, {})\r\n  },\r\n}\r\n"],"sourceRoot":""}